/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.oracle.jrockit.jfr.ContentType;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.SwingWorker;
import javax.swing.Timer;

/**
 *
 * @author Andreas
 */
public class AZoCamSyncJFrame extends javax.swing.JFrame implements FTPConnectionListener {

    Timer checkingTimer;

    /**
     * Creates new form AZoCamSyncJFrame
     */
    public AZoCamSyncJFrame() {
        initComponents();
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sdCardjPanel = new javax.swing.JPanel();
        wifiSdCardEnabledjToggleButton = new javax.swing.JToggleButton();
        sdCardStatusjTextField = new javax.swing.JTextField();
        sdCardPollingIntervalljComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sdCardjProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        sdCardjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("WiFi SD card"));
        sdCardjPanel.setLayout(new java.awt.GridBagLayout());

        wifiSdCardEnabledjToggleButton.setSelected(true);
        wifiSdCardEnabledjToggleButton.setText("Enabled");
        wifiSdCardEnabledjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiSdCardEnabledjToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(27, 16, 73, 16);
        sdCardjPanel.add(wifiSdCardEnabledjToggleButton, gridBagConstraints);

        sdCardStatusjTextField.setText("Service not started...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 0.5;
        sdCardjPanel.add(sdCardStatusjTextField, gridBagConstraints);

        sdCardPollingIntervalljComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10 sec", "20 sec", "30 sec", "60 sec" }));
        sdCardPollingIntervalljComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdCardPollingIntervalljComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardPollingIntervalljComboBox, gridBagConstraints);

        jLabel1.setText("Pull Intervall:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardjProgressBar, gridBagConstraints);

        getContentPane().add(sdCardjPanel, new java.awt.GridBagConstraints());

        pack();
    }// </editor-fold>//GEN-END:initComponents

   private int getMillisecsFromList(){
       
   int secs= Integer.parseInt(sdCardPollingIntervalljComboBox.getSelectedItem().toString().split(" ")[0]);
   return secs*1000;
   }
    private void wifiSdCardEnabledjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiSdCardEnabledjToggleButtonActionPerformed
        if (wifiSdCardEnabledjToggleButton.isSelected()) {
            final FTPConnection f = new FTPConnection();
            f.addFTPConnectionListenerOnce(this);
            if ((checkingTimer != null)&&checkingTimer.isRunning()) {
                checkingTimer.stop();
                checkingTimer=null;
            }
            checkingTimer = new Timer(getMillisecsFromList(), new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingWorker sw = new SwingWorker() {

                        @Override
                        protected Object doInBackground() throws Exception {
                            
                            long a=System.currentTimeMillis();
                                     f.checkConnection();
          
                            long b=System.currentTimeMillis();
                            checkingTimer.setDelay((int) (getMillisecsFromList()+(b-a)));
                            return null;
                        }
                    };
                    sw.execute();

                }
            });
            checkingTimer.setInitialDelay(0);
            checkingTimer.setDelay(getMillisecsFromList());
            checkingTimer.start();

        } else {
        checkingTimer.stop();
        }
    }//GEN-LAST:event_wifiSdCardEnabledjToggleButtonActionPerformed

    private void sdCardPollingIntervalljComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AZoCamSyncJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JComboBox sdCardPollingIntervalljComboBox;
    private javax.swing.JTextField sdCardStatusjTextField;
    private javax.swing.JPanel sdCardjPanel;
    private javax.swing.JProgressBar sdCardjProgressBar;
    private javax.swing.JToggleButton wifiSdCardEnabledjToggleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void receiveNotification(FTPConnectionStatus status, String message, int progress) {
        sdCardStatusjTextField.setText(status.name());
        sdCardjProgressBar.setMaximum(100);
        sdCardjProgressBar.setValue(progress);
    }
}
