/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.oracle.jrockit.jfr.ContentType;
import de.quadrillenschule.azocamsyncd.LocalStorage;
import de.quadrillenschule.azocamsyncd.ftpservice.AZoFTPFile;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.Timer;

/**
 *
 * @author Andreas
 */
public class AZoCamSyncJFrame extends javax.swing.JFrame implements FTPConnectionListener {
    
    LocalStorage localStorage;
    Timer checkingTimer;

    /**
     * Creates new form AZoCamSyncJFrame
     */
    public AZoCamSyncJFrame() {
        localStorage = new LocalStorage(new File(System.getProperty("user.home") + System.getProperty("file.separator") + "azocamsync"));
        
        initComponents();
        sdCardjProgressBar.setMaximum(100);
        
    }
    
    public void startService() {
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sdCardjPanel = new javax.swing.JPanel();
        wifiSdCardEnabledjToggleButton = new javax.swing.JToggleButton();
        sdCardPollingIntervalljComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        sdCardjProgressBar = new javax.swing.JProgressBar();
        imagesOnCardLabel = new javax.swing.JLabel();
        tobesynchronizedSDjLabel = new javax.swing.JLabel();
        sdCardMessagejTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        sdCardjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("WiFi SD card"));
        sdCardjPanel.setLayout(new java.awt.GridBagLayout());

        wifiSdCardEnabledjToggleButton.setSelected(true);
        wifiSdCardEnabledjToggleButton.setText("Enabled");
        wifiSdCardEnabledjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiSdCardEnabledjToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(27, 16, 73, 16);
        sdCardjPanel.add(wifiSdCardEnabledjToggleButton, gridBagConstraints);

        sdCardPollingIntervalljComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10 sec", "20 sec", "30 sec", "60 sec" }));
        sdCardPollingIntervalljComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdCardPollingIntervalljComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardPollingIntervalljComboBox, gridBagConstraints);

        jLabel1.setText("Pull Intervall:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(jLabel1, gridBagConstraints);

        sdCardjProgressBar.setString("");
        sdCardjProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        sdCardjPanel.add(sdCardjProgressBar, gridBagConstraints);

        imagesOnCardLabel.setText("Files on card: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(imagesOnCardLabel, gridBagConstraints);

        tobesynchronizedSDjLabel.setText("Files to be synchronised: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(tobesynchronizedSDjLabel, gridBagConstraints);

        sdCardMessagejTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardMessagejTextField1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(sdCardjPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getMillisecsFromList() {
        
        int secs = Integer.parseInt(sdCardPollingIntervalljComboBox.getSelectedItem().toString().split(" ")[0]);
        return secs * 1000;
    }
    SwingWorker timeWorker;
    private void wifiSdCardEnabledjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiSdCardEnabledjToggleButtonActionPerformed
        if (wifiSdCardEnabledjToggleButton.isSelected()) {
            final FTPConnection f = new FTPConnection();
            f.addFTPConnectionListenerOnce(this);
            
            ActionListener updateJobAL = new ActionListener() {
                
                @Override
                public void actionPerformed(ActionEvent e) {
                    LinkedList<AZoFTPFile> retval = f.checkConnection();
                    
                    imagesOnCardLabel.setText("Files on card: " + retval.size());
                    LinkedList<AZoFTPFile> r = new LinkedList<>();
                    for (AZoFTPFile af : retval) {
                        try {
                            if (!localStorage.equalsLocal(af)) {
                                r.add(af);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    };
                    tobesynchronizedSDjLabel.setText("Files to be synchronised: " + r.size());
                    f.download(r, localStorage);
                }
            };
            
            timeWorker = new SwingWorker() {
                
                @Override
                protected Object doInBackground() throws Exception {
                    
                    Timer t = new Timer(getMillisecsFromList(), updateJobAL);
                    t.setInitialDelay(0);
                    t.start();
                    
                    return null;
                }
            };
           
            timeWorker.execute();
           System.out.println("here");
            
        } else {
            timeWorker.cancel(false);
            
        }
    }//GEN-LAST:event_wifiSdCardEnabledjToggleButtonActionPerformed

    private void sdCardPollingIntervalljComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AZoCamSyncJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imagesOnCardLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField sdCardMessagejTextField1;
    private javax.swing.JComboBox sdCardPollingIntervalljComboBox;
    private javax.swing.JPanel sdCardjPanel;
    private javax.swing.JProgressBar sdCardjProgressBar;
    private javax.swing.JLabel tobesynchronizedSDjLabel;
    private javax.swing.JToggleButton wifiSdCardEnabledjToggleButton;
    // End of variables declaration//GEN-END:variables

    @Override
    synchronized public void receiveNotification(FTPConnectionStatus status, String message, int progress) {
        //    sdCardStatusjTextField.setText(status.name());
        sdCardMessagejTextField1.setText(message);
        sdCardjProgressBar.setString(status.name());
        if (progress >= 0) {
            sdCardjProgressBar.setValue(progress);
        }
        revalidate();
    }
}
