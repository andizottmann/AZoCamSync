/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.gui;

import de.quadrillenschule.azocamsyncd.GlobalProperties;
import de.quadrillenschule.azocamsyncd.GlobalProperties.CamSyncProperties;
import de.quadrillenschule.azocamsyncd.LocalStorage;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import static de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener.FTPConnectionStatus.DOWNLOADERROR;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dialog;
import java.awt.Dimension;
import static java.awt.Frame.NORMAL;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Andreas
 */
public class AZoCamSyncJFrame extends javax.swing.JFrame implements FTPConnectionListener {

    LocalStorage localStorage;
    Timer checkingTimer;
    GlobalProperties gp;
    TrayIcon trayIcon;
    Dimension startSize;

    /**
     * Creates new form AZoCamSyncJFrame
     */
    public AZoCamSyncJFrame() {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        gp = new GlobalProperties();

        localStorage = new LocalStorage(new File(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH)), gp);
        localStorage.setUseDateFolders(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
        localStorage.setDateFormat(gp.getProperty(CamSyncProperties.DATE_FORMAT));
        initComponents();
        photoProjectJPanel1.setParent(this);
        photoProjectJPanel1.setFtpConnection(f);
        initMyComponents();
        addSystemTray();
        startSize = getSize();

    }

    void initMyComponents() {
        this.setIconImage(createImage("/de/quadrillenschule/azocamsyncd/gui/res/Camera-icon32.png", "tray icon"));
        //     limitSDCardFilesjTextField.setText(gp.getProperty(CamSyncProperties.SD_FILELIMIT));
        sdCardjProgressBar.setMaximum(100);
        defaultProgressBarColor = sdCardjProgressBar.getForeground();
        useDateFolderjCheckBox.setSelected(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
        dateFormatjTextField.setText(gp.getProperty(CamSyncProperties.DATE_FORMAT));
        exploreWifiSDPanel1.setFtpConnection(f);
        exploreWifiSDPanel1.setLocalStorage(localStorage);
        configurejToggleButtonActionPerformed(null);
        imagejLabel2.setComponentPopupMenu(jPopupMenu1);
        //   latestImagejLabel.setComponentPopupMenu(jPopupMenu1);
        bigImagejLabel.setComponentPopupMenu(jPopupMenu1);
        sdCardPollingIntervalljComboBox.setModel(new DefaultComboBoxModel(PollingIntervallListEntry.allEntries().toArray()));

        sdCardPollingIntervalljComboBox.setSelectedIndex(PollingIntervallListEntry.indexOf(Integer.parseInt(gp.getProperty(CamSyncProperties.PULLINTERVALLSECS))));
        try {
            ToolTipManager.sharedInstance().setEnabled(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.TOOLTIPS)));

            lastDownloaded = new File(gp.getProperty(CamSyncProperties.LATESTIMAGEPATH));
            updateAllImageLabels(new File(gp.getProperty(CamSyncProperties.LATESTIMAGEPATH)));
        } catch (MalformedURLException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void startService() {
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu1 = new javax.swing.JPopupMenu();
        openjMenuItem = new javax.swing.JMenuItem();
        openDirjMenuItem1 = new javax.swing.JMenuItem();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel10 = new javax.swing.JPanel();
        sdCardjPanel = new javax.swing.JPanel();
        sdCardPollingIntervalljComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        firstIPAdressjTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        imagesOnCardLabel = new javax.swing.JLabel();
        tobesynchronizedSDjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileExtensionsjTextArea = new javax.swing.JTextArea();
        wizardButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        localStorageSelectDirjButton = new javax.swing.JButton();
        localStorageDirjTextField = new javax.swing.JTextField();
        useDateFolderjCheckBox = new javax.swing.JCheckBox();
        dateFormatjTextField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        notifyConnectionjCheckBox = new javax.swing.JCheckBox();
        notifyDownloadjCheckBox = new javax.swing.JCheckBox();
        imagejPanel8 = new javax.swing.JPanel();
        bigImagejLabel = new javax.swing.JLabel();
        exploreWifiSDPanel1 = new de.quadrillenschule.azocamsyncd.gui.ExploreWifiSDPanel();
        photoProjectJPanel1 = new de.quadrillenschule.azocamsyncd.astromode.gui.PhotoProjectJPanel();
        sdCardjProgressBar = new javax.swing.JProgressBar();
        downloadjProgressBar = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        imagejLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        configurejToggleButton = new javax.swing.JToggleButton();
        wifiSdCardEnabledjToggleButton = new javax.swing.JToggleButton();
        alwaysOnTopjCheckBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        syncedjRadioButton = new javax.swing.JRadioButton();

        openjMenuItem.setText("Open...");
        openjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openjMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(openjMenuItem);

        openDirjMenuItem1.setText("Open Dir...");
        openDirjMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirjMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(openDirjMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AZoCamSyncDesktop");
        setMaximumSize(new java.awt.Dimension(700, 800));
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setLayout(new java.awt.GridBagLayout());

        sdCardjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Remote WiFi SD Card", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        sdCardjPanel.setLayout(new java.awt.GridBagLayout());

        sdCardPollingIntervalljComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10 sec", "20 sec", "30 sec", "60 sec" }));
        sdCardPollingIntervalljComboBox.setToolTipText("The frequency when the WiFi SD card is checked for connection and new images.");
        sdCardPollingIntervalljComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sdCardPollingIntervalljComboBoxItemStateChanged(evt);
            }
        });
        sdCardPollingIntervalljComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdCardPollingIntervalljComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardPollingIntervalljComboBox, gridBagConstraints);

        jLabel1.setText("Pull Intervall:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Cards Adress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        sdCardjPanel.add(jLabel2, gridBagConstraints);

        firstIPAdressjTextField1.setText(gp.getProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS));
        firstIPAdressjTextField1.setToolTipText("The IP adress or the hostname. May be a comma-separated list.");
        firstIPAdressjTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                firstIPAdressjTextField1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(firstIPAdressjTextField1, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Files on Card"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        imagesOnCardLabel.setText("Total: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        jPanel1.add(imagesOnCardLabel, gridBagConstraints);

        tobesynchronizedSDjLabel.setText("To be synchronised: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        jPanel1.add(tobesynchronizedSDjLabel, gridBagConstraints);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("File Extensions"));
        jScrollPane1.setToolTipText("The extensions of files to be considered.");

        fileExtensionsjTextArea.setColumns(20);
        fileExtensionsjTextArea.setRows(5);
        fileExtensionsjTextArea.setText(gp.getProperty(CamSyncProperties.FILETYPES).replaceAll(",", "\n")
        );
        fileExtensionsjTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fileExtensionsjTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(fileExtensionsjTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.4;
        sdCardjPanel.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(sdCardjPanel, gridBagConstraints);

        wizardButton.setText("Run Wizard....");
        wizardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wizardButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(wizardButton, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel10);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Local Storage", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        localStorageSelectDirjButton.setText("Select Directory...");
        localStorageSelectDirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localStorageSelectDirjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        jPanel2.add(localStorageSelectDirjButton, gridBagConstraints);

        localStorageDirjTextField.setEditable(false);
        localStorageDirjTextField.setText(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel2.add(localStorageDirjTextField, gridBagConstraints);

        useDateFolderjCheckBox.setText("Use Date Folders:");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), useDateFolderjCheckBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        useDateFolderjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDateFolderjCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(useDateFolderjCheckBox, gridBagConstraints);

        dateFormatjTextField.setText("jTextField1");
        dateFormatjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFormatjTextFieldActionPerformed(evt);
            }
        });
        dateFormatjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateFormatjTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(dateFormatjTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel3.add(jPanel2, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tray Icon Notifications", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel9.setLayout(new java.awt.GridBagLayout());

        notifyConnectionjCheckBox.setSelected(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.NOTIFY_CONNECTION))
        );
        notifyConnectionjCheckBox.setText("Notify on Connection Status");
        notifyConnectionjCheckBox.setActionCommand("");
        notifyConnectionjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyConnectionjCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        jPanel9.add(notifyConnectionjCheckBox, gridBagConstraints);

        notifyDownloadjCheckBox.setSelected(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.NOTIFY_DOWNLOAD))
        );
        notifyDownloadjCheckBox.setText("Notify on Downloads");
        notifyDownloadjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyDownloadjCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(notifyDownloadjCheckBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel3.add(jPanel9, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel3);

        jPanel7.add(jSplitPane1);

        jTabbedPane1.addTab("Configure", jPanel7);

        bigImagejLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bigImagejLabel.setText("No Latest Image to View.");
        bigImagejLabel.setToolTipText("Right-Click for menu");
        bigImagejLabel.setMaximumSize(null);
        bigImagejLabel.setPreferredSize(new java.awt.Dimension(600, 400));
        imagejPanel8.add(bigImagejLabel);

        jTabbedPane1.addTab("Image", imagejPanel8);

        exploreWifiSDPanel1.setBorder(null);
        jTabbedPane1.addTab("Manage Remote Files", exploreWifiSDPanel1);
        jTabbedPane1.addTab("Astro Mode", photoProjectJPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);
        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        sdCardjProgressBar.setString("");
        sdCardjProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(sdCardjProgressBar, gridBagConstraints);

        downloadjProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(downloadjProgressBar, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        imagejLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagejLabel2.setText("No image to view.");
        imagejLabel2.setToolTipText("Right-Click for menu");
        imagejLabel2.setMaximumSize(new java.awt.Dimension(90, 60));
        imagejLabel2.setMinimumSize(new java.awt.Dimension(90, 60));
        imagejLabel2.setPreferredSize(new java.awt.Dimension(90, 60));
        jPanel4.add(imagejLabel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        configurejToggleButton.setText("<html><b>Expand</b></html>");
        configurejToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurejToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 0);
        jPanel5.add(configurejToggleButton, gridBagConstraints);

        wifiSdCardEnabledjToggleButton.setFont(wifiSdCardEnabledjToggleButton.getFont().deriveFont(wifiSdCardEnabledjToggleButton.getFont().getStyle() | java.awt.Font.BOLD, wifiSdCardEnabledjToggleButton.getFont().getSize()+1));
        wifiSdCardEnabledjToggleButton.setText("NOT RUNNING");
        wifiSdCardEnabledjToggleButton.setToolTipText("Start and stop the background service");
        wifiSdCardEnabledjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiSdCardEnabledjToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(wifiSdCardEnabledjToggleButton, gridBagConstraints);

        alwaysOnTopjCheckBox.setText("on Top");
        alwaysOnTopjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysOnTopjCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        jPanel5.add(alwaysOnTopjCheckBox, gridBagConstraints);

        jButton1.setText("<html><b>Minimize</b></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(2, 1, 0, 0);
        jPanel5.add(jButton1, gridBagConstraints);

        syncedjRadioButton.setSelected(true);
        syncedjRadioButton.setText("Unsynced");
        syncedjRadioButton.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel5.add(syncedjRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel5, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getMillisecsFromList() {

        int secs = ((PollingIntervallListEntry) sdCardPollingIntervalljComboBox.getSelectedItem()).seconds;
        return secs * 1000;
    }
    //  SwingWorker timeWorker;
    final FTPConnection f = new FTPConnection();
    Thread thread;
    Timer t, tdownload;
    private void wifiSdCardEnabledjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiSdCardEnabledjToggleButtonActionPerformed
        if (wifiSdCardEnabledjToggleButton.isSelected()) {
            wifiSdCardEnabledjToggleButton.setText("RUNNING");
            //"192.168.178.254","192.168.178.32"
            f.setPossibleConnections(gp.getProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS).split(","));
            f.setFileTypes(gp.getProperty(CamSyncProperties.FILETYPES).split(","));
            f.addFTPConnectionListenerOnce(this);
            if (t != null) {
                t.stop();
            }
            t = new Timer(getMillisecsFromList(), new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingBackgroundUpdater sbu = new SwingBackgroundUpdater(gp, f, localStorage, t);

                    sbu.start();
                }
            });
            t.setInitialDelay(0);
            t.setDelay(getMillisecsFromList());
            t.start();
            System.out.println("here");

        } else {
            if (t != null) {
                t.stop();
            }
            wifiSdCardEnabledjToggleButton.setText("NOT RUNNING");
        }
    }//GEN-LAST:event_wifiSdCardEnabledjToggleButtonActionPerformed

    private void configurejToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurejToggleButtonActionPerformed

        jTabbedPane1.setVisible(configurejToggleButton.isSelected());
        if (configurejToggleButton.isSelected()) {
            configurejToggleButton.setText("<html><b>Widget</b></html>");
        } else {
            configurejToggleButton.setText("<html><b>Expand</b></html>");
        }

        if (configurejToggleButton.isSelected()) {

            setMinimumSize(new Dimension(500, 300));
        } else {
            setMinimumSize(new Dimension(300, 50));
        }
        repaint();
        pack();
    }//GEN-LAST:event_configurejToggleButtonActionPerformed

    private void alwaysOnTopjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysOnTopjCheckBoxActionPerformed
        setAlwaysOnTop(alwaysOnTopjCheckBox.isSelected());
    }//GEN-LAST:event_alwaysOnTopjCheckBoxActionPerformed

    private void openjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openjMenuItemActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded);
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openjMenuItemActionPerformed

    private void openDirjMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirjMenuItem1ActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded.getParentFile());
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openDirjMenuItem1ActionPerformed
    boolean blockNext = false;
    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        System.out.println(evt.getOldState() + ":" + evt.getNewState() + ":" + blockNext);
        if (blockNext) {
            blockNext = false;

            return;
        }
        if (evt.getNewState() == 6 && !configurejToggleButton.isSelected()) {
            configurejToggleButton.setSelected(true);
            configurejToggleButtonActionPerformed(null);
            alwaysOnTopjCheckBox.setSelected(false);
            alwaysOnTopjCheckBoxActionPerformed(null);
            blockNext = true;
            return;
        }
        if (evt.getNewState() == 6 && configurejToggleButton.isSelected()) {
            configurejToggleButton.setSelected(false);
            configurejToggleButtonActionPerformed(null);
            alwaysOnTopjCheckBox.setSelected(true);
            alwaysOnTopjCheckBoxActionPerformed(null);
            blockNext = true;
            return;
        }
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing


    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed
    int lastSelectedTabbedPaneIndex = 1;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setExtendedState(ICONIFIED);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void notifyDownloadjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyDownloadjCheckBoxActionPerformed
        gp.setProperty(CamSyncProperties.NOTIFY_DOWNLOAD, "" + notifyDownloadjCheckBox.isSelected());
    }//GEN-LAST:event_notifyDownloadjCheckBoxActionPerformed

    private void notifyConnectionjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyConnectionjCheckBoxActionPerformed
        gp.setProperty(CamSyncProperties.NOTIFY_CONNECTION, "" + notifyConnectionjCheckBox.isSelected());
    }//GEN-LAST:event_notifyConnectionjCheckBoxActionPerformed

    private void dateFormatjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFormatjTextFieldKeyReleased
        gp.setProperty(CamSyncProperties.DATE_FORMAT, dateFormatjTextField.getText());
        localStorage.setDateFormat(dateFormatjTextField.getText());
    }//GEN-LAST:event_dateFormatjTextFieldKeyReleased

    private void dateFormatjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFormatjTextFieldActionPerformed

    }//GEN-LAST:event_dateFormatjTextFieldActionPerformed

    private void useDateFolderjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDateFolderjCheckBoxActionPerformed
        gp.setProperty(CamSyncProperties.USE_DATEFOLDERS, "" + useDateFolderjCheckBox.isSelected());
        localStorage.setUseDateFolders(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
    }//GEN-LAST:event_useDateFolderjCheckBoxActionPerformed

    private void localStorageSelectDirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localStorageSelectDirjButtonActionPerformed
        JFileChooser jfc = new JFileChooser(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH));
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            localStorageDirjTextField.setText(jfc.getSelectedFile().getAbsolutePath());

            gp.setProperty(CamSyncProperties.LOCALSTORAGE_PATH, jfc.getSelectedFile().getAbsolutePath());
            localStorage.setDirectory(jfc.getSelectedFile());
        }
    }//GEN-LAST:event_localStorageSelectDirjButtonActionPerformed

    private void wizardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wizardButtonActionPerformed
        this.setVisible(false);
        ConfigurationWizardJFrame cwj = new ConfigurationWizardJFrame();
        cwj.setModalExclusionType(Dialog.ModalExclusionType.APPLICATION_EXCLUDE);

        this.setAlwaysOnTop(false);
        cwj.toFront();
        cwj.setVisible(true);

        initMyComponents();
    }//GEN-LAST:event_wizardButtonActionPerformed

    private void fileExtensionsjTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileExtensionsjTextAreaKeyReleased
        String pf = "";
        String sep = "";
        for (String s : fileExtensionsjTextArea.getText().split("\n")) {
            if (s.trim() != "") {
                pf += sep + s.trim();
                sep = ",";
            }
        }
        gp.setProperty(CamSyncProperties.FILETYPES, pf);
    }//GEN-LAST:event_fileExtensionsjTextAreaKeyReleased

    private void firstIPAdressjTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstIPAdressjTextField1KeyReleased
        updateIPsProps();
    }//GEN-LAST:event_firstIPAdressjTextField1KeyReleased

    private void sdCardPollingIntervalljComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxActionPerformed
        wifiSdCardEnabledjToggleButtonActionPerformed(evt);
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxActionPerformed

    private void sdCardPollingIntervalljComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxItemStateChanged
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
        gp.setProperty(CamSyncProperties.PULLINTERVALLSECS, ((PollingIntervallListEntry) sdCardPollingIntervalljComboBox.getSelectedItem()).seconds + "");
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxItemStateChanged

    private void updateIPsProps() {
        gp.setProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS, firstIPAdressjTextField1.getText());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AZoCamSyncJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alwaysOnTopjCheckBox;
    private javax.swing.JLabel bigImagejLabel;
    private javax.swing.JToggleButton configurejToggleButton;
    private javax.swing.JTextField dateFormatjTextField;
    private javax.swing.JProgressBar downloadjProgressBar;
    private de.quadrillenschule.azocamsyncd.gui.ExploreWifiSDPanel exploreWifiSDPanel1;
    private javax.swing.JTextArea fileExtensionsjTextArea;
    private javax.swing.JTextField firstIPAdressjTextField1;
    private javax.swing.JLabel imagejLabel2;
    private javax.swing.JPanel imagejPanel8;
    private javax.swing.JLabel imagesOnCardLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField localStorageDirjTextField;
    private javax.swing.JButton localStorageSelectDirjButton;
    private javax.swing.JCheckBox notifyConnectionjCheckBox;
    private javax.swing.JCheckBox notifyDownloadjCheckBox;
    private javax.swing.JMenuItem openDirjMenuItem1;
    private javax.swing.JMenuItem openjMenuItem;
    private de.quadrillenschule.azocamsyncd.astromode.gui.PhotoProjectJPanel photoProjectJPanel1;
    private javax.swing.JComboBox sdCardPollingIntervalljComboBox;
    private javax.swing.JPanel sdCardjPanel;
    private javax.swing.JProgressBar sdCardjProgressBar;
    private javax.swing.JRadioButton syncedjRadioButton;
    private javax.swing.JLabel tobesynchronizedSDjLabel;
    private javax.swing.JCheckBox useDateFolderjCheckBox;
    private javax.swing.JToggleButton wifiSdCardEnabledjToggleButton;
    private javax.swing.JButton wizardButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    File lastDownloaded;
    Color defaultProgressBarColor;
    long lasttimestamp;
    long lastbytes;

    boolean treehasfirstUpdate = false;
    boolean laststatewasunconnected = true;

    @Override
    public void receiveNotification(FTPConnectionStatus status, String message, int progress) {
        syncedjRadioButton.setSelected(f.isLooksFullySynced());
        if (f.isLooksFullySynced()) {
            syncedjRadioButton.setForeground(Color.green);
            syncedjRadioButton.setText("Synced");
        } else {
            syncedjRadioButton.setForeground(Color.black);
            syncedjRadioButton.setText("No Status");
        };
        if ((status == FTPConnectionStatus.TRYING)) {
            setTrayIcon(createImage("/de/quadrillenschule/azocamsyncd/gui/res/Camera-icon.png", "tray icon"));

            sdCardjProgressBar.setValue(100);
        } else {
            sdCardjProgressBar.setForeground(defaultProgressBarColor);
        }
        if ((status == FTPConnectionStatus.CONNECTED)) {
            setTrayIcon(createImage("/de/quadrillenschule/azocamsyncd/gui/res/Camera-icon_green.png", "tray icon"));
            downloadjProgressBar.setValue(0);
            downloadjProgressBar.setString("-");
            sdCardjProgressBar.setForeground(GlobalProperties.COLOR_CONNECTED);

            sdCardjProgressBar.setValue(100);
            if (laststatewasunconnected) {
                if (Boolean.parseBoolean(gp.getProperty(CamSyncProperties.NOTIFY_CONNECTION))) {
                    displayTrayIconNotification("Connected to WiFi SD", "The connection to your WiFi SD card is established.", TrayIcon.MessageType.INFO, CamSyncProperties.NOTIFY_CONNECTION);
                }
                laststatewasunconnected = false;
            }
        }
        if ((status == DOWNLOADERROR) || (status == FTPConnectionStatus.NOCONNECTION)) {
            setTrayIcon(createImage("/de/quadrillenschule/azocamsyncd/gui/res/Camera-icon_red.png", "tray icon"));
            sdCardjProgressBar.setForeground(GlobalProperties.COLOR_UNCONNECTED);
            sdCardjProgressBar.setValue(100);
            if (!laststatewasunconnected) {
                if (Boolean.parseBoolean(gp.getProperty(CamSyncProperties.NOTIFY_CONNECTION))) {

                    displayTrayIconNotification("Connection Lost", "The connection to your WiFi SD card was lost.", TrayIcon.MessageType.WARNING, CamSyncProperties.NOTIFY_CONNECTION);
                }
                laststatewasunconnected = true;
            }
        }
        sdCardjProgressBar.setString(status.name() + " " + message);
        if (status.equals(FTPConnectionStatus.NEW_LOCAL_FILE)) {

            File f = new File(message);
            lastDownloaded = f;
            if (f.getAbsolutePath().toUpperCase().endsWith("JPG")){
            gp.setProperty(CamSyncProperties.LATESTIMAGEPATH, f.getAbsolutePath());
            }
            try {
                updateAllImageLabels(f);
            } catch (MalformedURLException ex) {
                Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (Boolean.parseBoolean(gp.getProperty(CamSyncProperties.NOTIFY_DOWNLOAD))) {

                displayTrayIconNotification("New Downloads from Camera", message, TrayIcon.MessageType.INFO, CamSyncProperties.NOTIFY_DOWNLOAD);
            }
        }
        if (progress >= 0) {
            sdCardjProgressBar.setValue(progress);
        }

        if (status.equals(FTPConnectionStatus.NUMBER_OF_FILES_DETECTED)) {

            imagesOnCardLabel.setText("Total (filtered): " + message);
            if (!treehasfirstUpdate) {
                exploreWifiSDPanel1.updateTree();
                treehasfirstUpdate = true;
            }

        }

        if (status.equals(FTPConnectionStatus.DELETING_FILES)) {
            imagesOnCardLabel.setText("Total (filtered): " + message);

            exploreWifiSDPanel1.updateTree();
            treehasfirstUpdate = true;

        }

        if (status.equals(FTPConnectionStatus.NUMBER_OF_SYNCHRONISABLE_FILES_DETECTED)) {
            syncedjRadioButton.setForeground(Color.blue);
            syncedjRadioButton.setText("Downloading");
            tobesynchronizedSDjLabel.setText("To be downloaded: " + message);
            exploreWifiSDPanel1.updateTree();

        }
        if (status.equals(FTPConnectionStatus.DOWNLOADING)) {
            syncedjRadioButton.setForeground(Color.blue);
            syncedjRadioButton.setText("Downloading");

            lasttimestamp = System.currentTimeMillis();
            lastbytes = 0;
            tdownload = new Timer(1000, new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    //  downloadjProgressBar.setString();
                    Thread t = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            long bytecount = f.cos.getByteCount();
                            int kbytespersec = (int) (((double) (bytecount - lastbytes) / 1024.0) / (double) ((System.currentTimeMillis() - lasttimestamp) / 1000.0));
                            downloadjProgressBar.setString((int) (100.0 * ((double) bytecount / (double) f.downloadsize)) + "% - " + kbytespersec + " Kb/S");
                            downloadjProgressBar.setValue((int) (100.0 * ((double) bytecount / (double) f.downloadsize)));
                            // repaint();
                            downloadjProgressBar.repaint();
                            lasttimestamp = System.currentTimeMillis();
                            lasttimestamp = System.currentTimeMillis();
                            lastbytes = bytecount;
                        }
                    });
                    t.start();

                }
            });
            tdownload.start();
        } else {
            downloadjProgressBar.setString("No Download");
            downloadjProgressBar.setValue(0);
            if (tdownload != null && tdownload.isRunning()) {

                tdownload.stop();
            }
        }
    }

    private void displayTrayIconNotification(String caption, String message, TrayIcon.MessageType messageType, CamSyncProperties notificationType) {
        if (Boolean.parseBoolean(gp.getProperty(notificationType))) {
            trayIcon.displayMessage(caption, message, messageType);
        }

    }

    private void updateAllImageLabels(File pf) throws MalformedURLException {
        final File f = pf;
            if (!f.getAbsolutePath().toUpperCase().endsWith("JPG")){
                return;
            }
        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                for (JLabel j : new JLabel[]{imagejLabel2, bigImagejLabel}) {

                    try {
                        ImageIcon ii = new ImageIcon(f.toURI().toURL());
                        int mywidth = j.getWidth();
                        if (mywidth > 600) {
                            mywidth = 600;
                        }
                        int width = ii.getIconWidth();
                        int height = ii.getIconHeight();
                        if (width <= 0) {
                            j.setText("No image to view.");
                        } else {
                            j.setText("");
                        }
                        double factor = (double) height / (double) width;
                        Image image = ii.getImage().getScaledInstance(mywidth, (int) ((double) mywidth * factor), Image.SCALE_SMOOTH);
                        j.setIcon(new ImageIcon(image));
                        //  repaint();}
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        if (!photoProjectJPanel1.isRunning()) {
            t.start();
        }

    }

    //Obtain the image URL
    protected static Image createImage(String path, String description) {
        URL imageURL = AZoCamSyncJFrame.class.getResource(path);

        if (imageURL == null) {
            System.err.println("Resource not found: " + path);
            return null;
        } else {
            return (new ImageIcon(imageURL, description)).getImage();
        }
    }

    void addSystemTray() {
        if (!SystemTray.isSupported()) {
            System.out.println("SystemTray is not supported");
            return;
        }
        final TrayIcon trayI
                = new TrayIcon(createImage("/de/quadrillenschule/azocamsyncd/gui/res/Camera-icon.png", "tray icon"));
        trayI.setImageAutoSize(true);
        final SystemTray tray = SystemTray.getSystemTray();
        final AZoCamSyncJFrame azf = this;
        PopupMenu popupMenu = new PopupMenu("AZoCamSync");
        trayI.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                if (!azf.isVisible()) {
                    azf.setVisible(true);
                    azf.toFront();
                    azf.requestFocus();
                    configurejToggleButton.setSelected(false);
                    configurejToggleButtonActionPerformed(e);
                    azf.setExtendedState(NORMAL);
                } else {
                    azf.setVisible(false);
                    azf.setExtendedState(ICONIFIED);
                }
            }
        });
        MenuItem mi1 = new MenuItem("Configure..");
        mi1.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                azf.setVisible(true);
                azf.toFront();
                azf.requestFocus();
                configurejToggleButton.setSelected(true);
                configurejToggleButtonActionPerformed(e);
                azf.setExtendedState(NORMAL);
            }
        });

        popupMenu.add(mi1);

        MenuItem mi2 = new MenuItem("Open Folder..");
        mi2.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                azf.setState(NORMAL);
                azf.setVisible(true);
                azf.toFront();
                azf.requestFocus();
                try {
                    Desktop.getDesktop().open(lastDownloaded.getParentFile());
                } catch (IOException ex) {
                    Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        popupMenu.add(mi2);

        MenuItem mi3 = new MenuItem("Open File..");
        mi3.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                azf.setState(NORMAL);
                azf.setVisible(true);
                azf.toFront();
                azf.requestFocus();
                try {
                    Desktop.getDesktop().open(lastDownloaded);
                } catch (IOException ex) {
                    Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        popupMenu.add(mi3);

        MenuItem mi4 = new MenuItem("Exit...");
        mi4.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                azf.dispose();

            }
        });

        popupMenu.add(mi4);

        trayI.setToolTip("AZoCamSync");
        trayI.setPopupMenu(popupMenu);

        try {
            tray.add(trayI);
        } catch (AWTException e) {
            System.out.println("TrayIcon could not be added.");
        }
        trayIcon = trayI;
    }

    public void setTrayIcon(Image image) {
        this.setIconImage(image);
        if (trayIcon == null) {
            return;
        }
        trayIcon.setImageAutoSize(true);
        trayIcon.setImage(image);
    }

    @Override
    public void dispose() {

        if (JOptionPane.showConfirmDialog(rootPane, "Closing will also close the background service.", "You want to exit?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE) == JOptionPane.OK_OPTION) {
            f.close();
            super.dispose();
            System.exit(0);
        }
    }
}
