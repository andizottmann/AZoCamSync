/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.gui;

import de.quadrillenschule.azocamsyncd.GlobalProperties;
import de.quadrillenschule.azocamsyncd.GlobalProperties.CamSyncProperties;
import de.quadrillenschule.azocamsyncd.LocalStorage;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import static de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener.FTPConnectionStatus.DOWNLOADERROR;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Andreas
 */
public class AZoCamSyncJFrame extends javax.swing.JFrame implements FTPConnectionListener {

    LocalStorage localStorage;
    Timer checkingTimer;
    GlobalProperties gp;

    /**
     * Creates new form AZoCamSyncJFrame
     */
    public AZoCamSyncJFrame() {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        gp = new GlobalProperties();

        localStorage = new LocalStorage(new File(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH)));
        localStorage.setUseDateFolders(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
        localStorage.setDateFormat(gp.getProperty(CamSyncProperties.DATE_FORMAT));
        initComponents();
        sdCardjProgressBar.setMaximum(100);
        defaultProgressBarColor = sdCardjProgressBar.getForeground();
        useDateFolderjCheckBox.setSelected(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
        dateFormatjTextField.setText(gp.getProperty(CamSyncProperties.DATE_FORMAT));
        exploreWifiSDPanel1.setFtpConnection(f);
        exploreWifiSDPanel1.setLocalStorage(localStorage);
        configurejToggleButtonActionPerformed(null);
        imagejLabel2.setComponentPopupMenu(jPopupMenu1);
    }

    public void startService() {
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu1 = new javax.swing.JPopupMenu();
        openjMenuItem = new javax.swing.JMenuItem();
        openDirjMenuItem1 = new javax.swing.JMenuItem();
        jPanel6 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        exploreWifiSDPanel1 = new de.quadrillenschule.azocamsyncd.gui.ExploreWifiSDPanel();
        jPanel7 = new javax.swing.JPanel();
        sdCardjPanel = new javax.swing.JPanel();
        sdCardPollingIntervalljComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        firstIPAdressjTextField1 = new javax.swing.JTextField();
        secondIPAdressjTextField = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        imagesOnCardLabel = new javax.swing.JLabel();
        tobesynchronizedSDjLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileExtensionsjTextArea = new javax.swing.JTextArea();
        limitSDCardFilesjTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        localStorageSelectDirjButton = new javax.swing.JButton();
        localStorageDirjTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        latestImagejLabel = new javax.swing.JLabel();
        penlastfilejButton = new javax.swing.JButton();
        opendirjButton = new javax.swing.JButton();
        useDateFolderjCheckBox = new javax.swing.JCheckBox();
        dateFormatjTextField = new javax.swing.JTextField();
        sdCardjProgressBar = new javax.swing.JProgressBar();
        downloadjProgressBar = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        imagejLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        configurejToggleButton = new javax.swing.JToggleButton();
        wifiSdCardEnabledjToggleButton = new javax.swing.JToggleButton();
        alwaysOnTopjCheckBox = new javax.swing.JCheckBox();

        openjMenuItem.setText("Open...");
        openjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openjMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(openjMenuItem);

        openDirjMenuItem1.setText("Open Dir...");
        openDirjMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDirjMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(openDirjMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AZoCamSyncDesktop");
        setAlwaysOnTop(true);
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        exploreWifiSDPanel1.setBorder(null);
        jTabbedPane1.addTab("Manage Remote Files", exploreWifiSDPanel1);

        jPanel7.setLayout(new java.awt.GridLayout(1, 2));

        sdCardjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote WiFi SD Card"));
        sdCardjPanel.setLayout(new java.awt.GridBagLayout());

        sdCardPollingIntervalljComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10 sec", "20 sec", "30 sec", "60 sec" }));
        sdCardPollingIntervalljComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sdCardPollingIntervalljComboBoxItemStateChanged(evt);
            }
        });
        sdCardPollingIntervalljComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sdCardPollingIntervalljComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(sdCardPollingIntervalljComboBox, gridBagConstraints);

        jLabel1.setText("Pull Intervall:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        sdCardjPanel.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Cards 1st IP Adress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        sdCardjPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Cards 2nd IP Adress:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        sdCardjPanel.add(jLabel3, gridBagConstraints);

        firstIPAdressjTextField1.setText(gp.getProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS).split(",")[0]);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), firstIPAdressjTextField1, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        firstIPAdressjTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                firstIPAdressjTextField1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(firstIPAdressjTextField1, gridBagConstraints);

        secondIPAdressjTextField.setText(gp.getProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS).split(",")[1]);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), secondIPAdressjTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        secondIPAdressjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                secondIPAdressjTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        sdCardjPanel.add(secondIPAdressjTextField, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Files on Card"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        imagesOnCardLabel.setText("Total: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        jPanel1.add(imagesOnCardLabel, gridBagConstraints);

        tobesynchronizedSDjLabel.setText("To be synchronised: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        jPanel1.add(tobesynchronizedSDjLabel, gridBagConstraints);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("File Extensions"));

        fileExtensionsjTextArea.setColumns(20);
        fileExtensionsjTextArea.setRows(5);
        fileExtensionsjTextArea.setText(gp.getProperty(CamSyncProperties.FILETYPES).replaceAll(",", "\n")
        );
        fileExtensionsjTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fileExtensionsjTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(fileExtensionsjTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        limitSDCardFilesjTextField.setText("-1");
        limitSDCardFilesjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                limitSDCardFilesjTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(limitSDCardFilesjTextField, gridBagConstraints);

        jLabel4.setText("Limit remaining files to: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 0.4;
        sdCardjPanel.add(jPanel1, gridBagConstraints);

        jPanel7.add(sdCardjPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Local Storage"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        localStorageSelectDirjButton.setText("Select Directory...");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), localStorageSelectDirjButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        localStorageSelectDirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localStorageSelectDirjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weighty = 0.1;
        jPanel2.add(localStorageSelectDirjButton, gridBagConstraints);

        localStorageDirjTextField.setEditable(false);
        localStorageDirjTextField.setText(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH)
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(localStorageDirjTextField, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Latest File"));
        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(latestImagejLabel, gridBagConstraints);

        penlastfilejButton.setText("Open File...");
        penlastfilejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                penlastfilejButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(penlastfilejButton, gridBagConstraints);

        opendirjButton.setText("Open Directory...");
        opendirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opendirjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        jPanel3.add(opendirjButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        useDateFolderjCheckBox.setText("Use Date Folders:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), useDateFolderjCheckBox, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        useDateFolderjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useDateFolderjCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel2.add(useDateFolderjCheckBox, gridBagConstraints);

        dateFormatjTextField.setText("jTextField1");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, wifiSdCardEnabledjToggleButton, org.jdesktop.beansbinding.ELProperty.create("${!selected}"), dateFormatjTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        dateFormatjTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFormatjTextFieldActionPerformed(evt);
            }
        });
        dateFormatjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                dateFormatjTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(dateFormatjTextField, gridBagConstraints);

        jPanel7.add(jPanel2);

        jTabbedPane1.addTab("Configure", jPanel7);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);
        jTabbedPane1.getAccessibleContext().setAccessibleName("");

        sdCardjProgressBar.setString("");
        sdCardjProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(sdCardjProgressBar, gridBagConstraints);

        downloadjProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(downloadjProgressBar, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridLayout());

        imagejLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagejLabel2.setText("No image to view.");
        imagejLabel2.setMaximumSize(new java.awt.Dimension(90, 60));
        imagejLabel2.setMinimumSize(new java.awt.Dimension(90, 60));
        imagejLabel2.setPreferredSize(new java.awt.Dimension(90, 60));
        jPanel4.add(imagejLabel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        configurejToggleButton.setText("Configure...");
        configurejToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configurejToggleButtonActionPerformed(evt);
            }
        });
        jPanel5.add(configurejToggleButton);

        wifiSdCardEnabledjToggleButton.setFont(wifiSdCardEnabledjToggleButton.getFont().deriveFont(wifiSdCardEnabledjToggleButton.getFont().getStyle() | java.awt.Font.BOLD, wifiSdCardEnabledjToggleButton.getFont().getSize()+1));
        wifiSdCardEnabledjToggleButton.setSelected(true);
        wifiSdCardEnabledjToggleButton.setText("RUNNING");
        wifiSdCardEnabledjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiSdCardEnabledjToggleButtonActionPerformed(evt);
            }
        });
        jPanel5.add(wifiSdCardEnabledjToggleButton);

        alwaysOnTopjCheckBox.setSelected(true);
        alwaysOnTopjCheckBox.setText("on Top");
        alwaysOnTopjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alwaysOnTopjCheckBoxActionPerformed(evt);
            }
        });
        jPanel5.add(alwaysOnTopjCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel5, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int getMillisecsFromList() {

        int secs = Integer.parseInt(sdCardPollingIntervalljComboBox.getSelectedItem().toString().split(" ")[0]);
        return secs * 1000;
    }
    //  SwingWorker timeWorker;
    final FTPConnection f = new FTPConnection();
    Thread thread;
    Timer t, tdownload;
    private void wifiSdCardEnabledjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiSdCardEnabledjToggleButtonActionPerformed
        if (wifiSdCardEnabledjToggleButton.isSelected()) {
            wifiSdCardEnabledjToggleButton.setText("RUNNING");
            //"192.168.178.254","192.168.178.32"
            f.setPossibleConnections(gp.getProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS).split(","));
            f.setFileTypes(gp.getProperty(CamSyncProperties.FILETYPES).split(","));
            f.addFTPConnectionListenerOnce(this);
            if (t != null) {
                t.stop();
            }
            t = new Timer(getMillisecsFromList(), new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    SwingBackgroundUpdater sbu = new SwingBackgroundUpdater(gp, f, localStorage, t);

                    sbu.start();
                }
            });
            t.setInitialDelay(0);
            t.setDelay(getMillisecsFromList());
            t.start();
            System.out.println("here");

        } else {
            if (t != null) {
                t.stop();
            }
            wifiSdCardEnabledjToggleButton.setText("NOT RUNNING");
        }
    }//GEN-LAST:event_wifiSdCardEnabledjToggleButtonActionPerformed

    private void sdCardPollingIntervalljComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxActionPerformed
        wifiSdCardEnabledjToggleButtonActionPerformed(evt);
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxActionPerformed

    private void sdCardPollingIntervalljComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sdCardPollingIntervalljComboBoxItemStateChanged
        wifiSdCardEnabledjToggleButtonActionPerformed(null);
    }//GEN-LAST:event_sdCardPollingIntervalljComboBoxItemStateChanged

    private void firstIPAdressjTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_firstIPAdressjTextField1KeyReleased
        updateIPsProps();
    }//GEN-LAST:event_firstIPAdressjTextField1KeyReleased

    private void secondIPAdressjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_secondIPAdressjTextFieldKeyReleased
        updateIPsProps();
    }//GEN-LAST:event_secondIPAdressjTextFieldKeyReleased

    private void fileExtensionsjTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileExtensionsjTextAreaKeyReleased
        String pf = "";
        String sep = "";
        for (String s : fileExtensionsjTextArea.getText().split("\n")) {
            if (s.trim() != "") {
                pf += sep + s.trim();
                sep = ",";
            }
        }
        gp.setProperty(CamSyncProperties.FILETYPES, pf);
    }//GEN-LAST:event_fileExtensionsjTextAreaKeyReleased

    private void limitSDCardFilesjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_limitSDCardFilesjTextFieldKeyReleased
        int i = Integer.parseInt(limitSDCardFilesjTextField.getText());
        gp.setProperty(CamSyncProperties.SD_FILELIMIT, i + "");
    }//GEN-LAST:event_limitSDCardFilesjTextFieldKeyReleased

    private void localStorageSelectDirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localStorageSelectDirjButtonActionPerformed
        JFileChooser jfc = new JFileChooser(gp.getProperty(CamSyncProperties.LOCALSTORAGE_PATH));
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            localStorageDirjTextField.setText(jfc.getSelectedFile().getAbsolutePath());

            gp.setProperty(CamSyncProperties.LOCALSTORAGE_PATH, jfc.getSelectedFile().getAbsolutePath());
            localStorage.setDirectory(jfc.getSelectedFile());
        }

    }//GEN-LAST:event_localStorageSelectDirjButtonActionPerformed

    private void penlastfilejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_penlastfilejButtonActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded);
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_penlastfilejButtonActionPerformed

    private void opendirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opendirjButtonActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded.getParentFile());
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_opendirjButtonActionPerformed

    private void useDateFolderjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useDateFolderjCheckBoxActionPerformed
        gp.setProperty(CamSyncProperties.USE_DATEFOLDERS, "" + useDateFolderjCheckBox.isSelected());
        localStorage.setUseDateFolders(Boolean.parseBoolean(gp.getProperty(CamSyncProperties.USE_DATEFOLDERS)));
    }//GEN-LAST:event_useDateFolderjCheckBoxActionPerformed

    private void dateFormatjTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFormatjTextFieldActionPerformed

    }//GEN-LAST:event_dateFormatjTextFieldActionPerformed

    private void dateFormatjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dateFormatjTextFieldKeyReleased
        gp.setProperty(CamSyncProperties.DATE_FORMAT, dateFormatjTextField.getText());
        localStorage.setDateFormat(dateFormatjTextField.getText());

    }//GEN-LAST:event_dateFormatjTextFieldKeyReleased

    private void configurejToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configurejToggleButtonActionPerformed
        jTabbedPane1.setVisible(configurejToggleButton.isSelected());
        if (configurejToggleButton.isSelected()) {

            setMinimumSize(new Dimension(500, 300));
        } else {
            setMinimumSize(new Dimension(300, 50));
        }
        repaint();
        pack();
    }//GEN-LAST:event_configurejToggleButtonActionPerformed

    private void alwaysOnTopjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alwaysOnTopjCheckBoxActionPerformed
        setAlwaysOnTop(alwaysOnTopjCheckBox.isSelected());
    }//GEN-LAST:event_alwaysOnTopjCheckBoxActionPerformed

    private void openjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openjMenuItemActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded);
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openjMenuItemActionPerformed

    private void openDirjMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDirjMenuItem1ActionPerformed
        try {
            Desktop.getDesktop().open(lastDownloaded.getParentFile());
        } catch (IOException ex) {
            Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openDirjMenuItem1ActionPerformed
    boolean blockNext=false;
    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        System.out.println(evt.getOldState() + ":" + evt.getNewState()+":"+blockNext);
        if (blockNext){
        blockNext=false;
      
        return;
        }
        if (evt.getNewState() == 6 && !configurejToggleButton.isSelected()) {
            configurejToggleButton.setSelected(true);
            configurejToggleButtonActionPerformed(null);
            alwaysOnTopjCheckBox.setSelected(false);
            alwaysOnTopjCheckBoxActionPerformed(null);
            blockNext=true;
           return;
        }
        if (evt.getNewState() == 6&& configurejToggleButton.isSelected()) {        
                configurejToggleButton.setSelected(false);
                configurejToggleButtonActionPerformed(null);
                alwaysOnTopjCheckBox.setSelected(true);
                alwaysOnTopjCheckBoxActionPerformed(null);
           blockNext=true;
           return;
        }
    }//GEN-LAST:event_formWindowStateChanged

    private void updateIPsProps() {
        gp.setProperty(GlobalProperties.CamSyncProperties.SDCARD_IPS, firstIPAdressjTextField1.getText() + "," + secondIPAdressjTextField.getText());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AZoCamSyncJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox alwaysOnTopjCheckBox;
    private javax.swing.JToggleButton configurejToggleButton;
    private javax.swing.JTextField dateFormatjTextField;
    private javax.swing.JProgressBar downloadjProgressBar;
    private de.quadrillenschule.azocamsyncd.gui.ExploreWifiSDPanel exploreWifiSDPanel1;
    private javax.swing.JTextArea fileExtensionsjTextArea;
    private javax.swing.JTextField firstIPAdressjTextField1;
    private javax.swing.JLabel imagejLabel2;
    private javax.swing.JLabel imagesOnCardLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel latestImagejLabel;
    private javax.swing.JTextField limitSDCardFilesjTextField;
    private javax.swing.JTextField localStorageDirjTextField;
    private javax.swing.JButton localStorageSelectDirjButton;
    private javax.swing.JMenuItem openDirjMenuItem1;
    private javax.swing.JButton opendirjButton;
    private javax.swing.JMenuItem openjMenuItem;
    private javax.swing.JButton penlastfilejButton;
    private javax.swing.JComboBox sdCardPollingIntervalljComboBox;
    private javax.swing.JPanel sdCardjPanel;
    private javax.swing.JProgressBar sdCardjProgressBar;
    private javax.swing.JTextField secondIPAdressjTextField;
    private javax.swing.JLabel tobesynchronizedSDjLabel;
    private javax.swing.JCheckBox useDateFolderjCheckBox;
    private javax.swing.JToggleButton wifiSdCardEnabledjToggleButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    File lastDownloaded;
    Color defaultProgressBarColor;
    long lasttimestamp;
    long lastbytes;

    boolean treehasfirstUpdate = false;

    @Override
    public void receiveNotification(FTPConnectionStatus status, String message, int progress) {
        //    sdCardStatusjTextField.setText(status.name());
        //     sdCardMessagejTextField1.setText(message);

        if ((status == FTPConnectionStatus.TRYING)) {
            //   sdCardjProgressBar.setForeground(defaultProgressBarColor);
            sdCardjProgressBar.setValue(100);
        } else {
            sdCardjProgressBar.setForeground(defaultProgressBarColor);
        }
        if ((status == FTPConnectionStatus.CONNECTED)) {
            //    sdCardjProgressBar.setForeground(defaultProgressBarColor);
            sdCardjProgressBar.setValue(100);
        }
        if ((status == DOWNLOADERROR) || (status == FTPConnectionStatus.NOCONNECTION)) {
            sdCardjProgressBar.setForeground(Color.red);
            sdCardjProgressBar.setValue(100);
        }
        sdCardjProgressBar.setString(status.name() + " " + message);
        if (status.equals(FTPConnectionStatus.NEW_LOCAL_FILE)) {

            try {
                for (JLabel j : new JLabel[]{imagejLabel2, latestImagejLabel}) {
                    File f = new File(message);
                    lastDownloaded = f;
                    ImageIcon ii = new ImageIcon(f.toURI().toURL());
                    int mywidth = j.getWidth();
                    int width = ii.getIconWidth();
                    int height = ii.getIconHeight();
                    if (width <= 0) {
                        j.setText("No image to view.");
                    } else {
                        j.setText("");
                    }
                    double factor = (double) height / (double) width;
                    Image image = ii.getImage().getScaledInstance(mywidth, (int) ((double) mywidth * factor), Image.SCALE_FAST);
                    j.setIcon(new ImageIcon(image));
                    //  repaint();}
                }
            } catch (MalformedURLException ex) {
                Logger.getLogger(AZoCamSyncJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (progress >= 0) {
            sdCardjProgressBar.setValue(progress);
        }

        if (status.equals(FTPConnectionStatus.NUMBER_OF_FILES_DETECTED)) {
            imagesOnCardLabel.setText("Total (filtered): " + message);
            if (!treehasfirstUpdate) {
                exploreWifiSDPanel1.updateTree();
                treehasfirstUpdate = true;
            }

        }
        if (status.equals(FTPConnectionStatus.NUMBER_OF_SYNCHRONISABLE_FILES_DETECTED)) {
            tobesynchronizedSDjLabel.setText("To be downloaded: " + message);
            exploreWifiSDPanel1.updateTree();

        }
        if (status.equals(FTPConnectionStatus.DOWNLOADING)) {
            lasttimestamp = System.currentTimeMillis();
            lastbytes = 0;
            tdownload = new Timer(1000, new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    //  downloadjProgressBar.setString();
                    Thread t = new Thread(new Runnable() {

                        @Override
                        public void run() {
                            long bytecount = f.cos.getByteCount();
                            int kbytespersec = (int) (((double) (bytecount - lastbytes) / 1024.0) / (double) ((System.currentTimeMillis() - lasttimestamp) / 1000.0));
                            downloadjProgressBar.setString((int) (100.0 * ((double) bytecount / (double) f.downloadsize)) + "% - " + kbytespersec + " Kb/S");
                            downloadjProgressBar.setValue((int) (100.0 * ((double) bytecount / (double) f.downloadsize)));
                            // repaint();
                            downloadjProgressBar.repaint();
                            lasttimestamp = System.currentTimeMillis();
                            lasttimestamp = System.currentTimeMillis();
                            lastbytes = bytecount;
                        }
                    });
                    t.start();

                }
            });
            tdownload.start();
        } else {
            downloadjProgressBar.setString("No Download");
            downloadjProgressBar.setValue(0);
            if (tdownload != null && tdownload.isRunning()) {

                tdownload.stop();
            }
        }
    }
}
