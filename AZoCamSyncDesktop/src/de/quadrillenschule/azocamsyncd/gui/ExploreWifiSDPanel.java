/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.gui;

import de.quadrillenschule.azocamsyncd.ftpservice.AZoFTPFile;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import java.io.IOException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.net.ftp.FTP;

/**
 *
 * @author Andreas
 */
public class ExploreWifiSDPanel extends javax.swing.JPanel {

    DefaultMutableTreeNode rootNode;
    private FTPConnection ftpConnection;

    /**
     * Creates new form ExploreWifiSDPanel
     */
    public ExploreWifiSDPanel() {
        initComponents();
        rootNode = new DefaultMutableTreeNode("/");
        DefaultTreeModel dtm = new DefaultTreeModel(rootNode);
        remotejTree.setModel(dtm);
    }

    private void createNodes(DefaultMutableTreeNode top) {
        LinkedList<AZoFTPFile> afs = ftpConnection.checkConnection(true);

        createSubNodes(top, afs);

    }

    private void createSubNodes(DefaultMutableTreeNode parent, LinkedList<AZoFTPFile> afs) {
        String parentNodeName = parent.toString();
        for (AZoFTPFile af : afs) {
            String nodeName = af.dir + af.ftpFile.getName();
            if (af.ftpFile.isDirectory()) {
                if (!parentNodeName.equals(nodeName)) {

                    if (nodeName.contains(parentNodeName)) {
                        if (StringUtils.countMatches(nodeName, "/") - 1 == StringUtils.countMatches(parentNodeName, "/")) {
                            DefaultMutableTreeNode tn = new DefaultMutableTreeNode(nodeName);
                            parent.add(tn);
                            createSubNodes(tn, afs);
                        }
                    };
                }
            }
//isFile
            if (af.ftpFile.isFile()) {
                if (nodeName.contains(parentNodeName)) {
                    if (StringUtils.countMatches(nodeName, "/") == 1 + StringUtils.countMatches(parentNodeName, "/")) {
                        DefaultMutableTreeNode tn = new DefaultMutableTreeNode(nodeName);
                        parent.add(tn);

                    }
                };
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        remotejTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        updateFromRemotejButton1 = new javax.swing.JButton();
        deletejButton1 = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Manage Files on Remote WiFI SD"));
        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setViewportView(remotejTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        updateFromRemotejButton1.setText("Update...");
        updateFromRemotejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateFromRemotejButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(updateFromRemotejButton1);

        deletejButton1.setText("Delete");
        deletejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletejButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(deletejButton1);

        add(jPanel1, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents
 DefaultTreeModel dtm;
    private void updateFromRemotejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFromRemotejButton1ActionPerformed

        Enumeration<TreePath> storeExpand = remotejTree.getExpandedDescendants(new TreePath(remotejTree.getModel().getRoot()));
        rootNode.removeAllChildren();
        createNodes(rootNode);
        if (dtm == null) {
            dtm = new DefaultTreeModel(rootNode);
            remotejTree.setModel(dtm);
        }
        dtm.nodeStructureChanged(rootNode);
        if (storeExpand != null) {
            while (storeExpand.hasMoreElements()) {
                TreePath t = storeExpand.nextElement();
                remotejTree.expandPath(t);
                remotejTree.setSelectionPath(t);
            }
        }
    }//GEN-LAST:event_updateFromRemotejButton1ActionPerformed

    private void deletejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletejButton1ActionPerformed
        LinkedList<String> deleteables = new LinkedList<>();
        for (TreePath tp : remotejTree.getSelectionPaths()) {
            //  System.out.println("Woudl delete:"+tp.getLastPathComponent().toString());
            deleteables.add(tp.getLastPathComponent().toString());
        }
        if (JOptionPane.showConfirmDialog(deletejButton1, "About to delete " + deleteables.size() + " files.", "Delete Files on Remote?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.OK_OPTION) {
            ftpConnection.simplyConnect(FTP.ASCII_FILE_TYPE);
            for (String f : deleteables) {
                try {
                    ftpConnection.deleteSingleFile(f);
                } catch (IOException ex) {
                    Logger.getLogger(ExploreWifiSDPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            ftpConnection.close();
        }
    }//GEN-LAST:event_deletejButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deletejButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree remotejTree;
    private javax.swing.JButton updateFromRemotejButton1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the ftpConnection
     */
    public FTPConnection getFtpConnection() {
        return ftpConnection;
    }

    /**
     * @param ftpConnection the ftpConnection to set
     */
    public void setFtpConnection(FTPConnection ftpConnection) {
        this.ftpConnection = ftpConnection;
    }
}
