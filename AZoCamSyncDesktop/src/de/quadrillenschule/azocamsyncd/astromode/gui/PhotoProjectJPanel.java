/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.astromode.gui;

import de.quadrillenschule.azocamsyncd.GlobalProperties;
import de.quadrillenschule.azocamsyncd.astromode.PhotoProject;
import de.quadrillenschule.azocamsyncd.astromode.PhotoSerie;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import java.awt.Component;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import org.apache.commons.net.ftp.FTPCommand;

/**
 *
 * @author Andreas
 */
public class PhotoProjectJPanel extends javax.swing.JPanel implements FTPConnectionListener {
    
    private PhotoProject project;
    private FTPConnection ftpConnection;
    private PhotoSerieJPanel activePanel;
    private boolean running = false;
    private Frame parent;

    /**
     * Creates new form PhotoProjectJPanel
     */
    public PhotoProjectJPanel() {
        GlobalProperties gp=new GlobalProperties();
        initComponents();
        
           project = new PhotoProject(new File(gp.getProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER)));
            project.setName("New Project");
            populateSeriesJPanels();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectjPanel = new javax.swing.JPanel();
        newProjectjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        projectNamejTextField1 = new javax.swing.JTextField();
        startjToggleButton = new javax.swing.JToggleButton();
        toolsjPanel = new javax.swing.JPanel();
        addLightFramesjButton = new javax.swing.JButton();
        addDarkFramesjButton = new javax.swing.JButton();
        addFlatFramesjButton = new javax.swing.JButton();
        addBiasFramesjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        removejButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        seriesjPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        projectjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Project"));
        projectjPanel.setLayout(new javax.swing.BoxLayout(projectjPanel, javax.swing.BoxLayout.LINE_AXIS));

        newProjectjButton.setText("Directory...");
        newProjectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectjButtonActionPerformed(evt);
            }
        });
        projectjPanel.add(newProjectjButton);

        jLabel1.setText("  Name: ");
        projectjPanel.add(jLabel1);

        projectNamejTextField1.setText("jTextField1");
        projectjPanel.add(projectNamejTextField1);

        startjToggleButton.setText("Start!");
        startjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startjToggleButtonActionPerformed(evt);
            }
        });
        projectjPanel.add(startjToggleButton);

        add(projectjPanel, java.awt.BorderLayout.NORTH);

        toolsjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Series"));
        toolsjPanel.setLayout(new javax.swing.BoxLayout(toolsjPanel, javax.swing.BoxLayout.PAGE_AXIS));

        addLightFramesjButton.setText("Add lightframes");
        addLightFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLightFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addLightFramesjButton);

        addDarkFramesjButton.setText("Add darkframes");
        addDarkFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDarkFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addDarkFramesjButton);

        addFlatFramesjButton.setText("Add flatframes");
        addFlatFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlatFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addFlatFramesjButton);

        addBiasFramesjButton.setText("Add bias frames");
        addBiasFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBiasFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addBiasFramesjButton);

        jLabel2.setText("   ");
        toolsjPanel.add(jLabel2);

        removejButton.setText("Remove");
        removejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(removejButton);

        add(toolsjPanel, java.awt.BorderLayout.EAST);

        seriesjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Series"));
        seriesjPanel.setLayout(new javax.swing.BoxLayout(seriesjPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(seriesjPanel);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void newProjectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectjButtonActionPerformed
        GlobalProperties gp = new GlobalProperties();
        
        JFileChooser jfc = new JFileChooser(gp.getProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER));
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showDialog(this, "Select Directory") == JFileChooser.APPROVE_OPTION) {
            gp.setProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER, jfc.getSelectedFile().getAbsolutePath());
       //     String name = JOptionPane.showInputDialog(this, "Give a name to this project");
            File projectFolder = new File(jfc.getSelectedFile(), projectNamejTextField1.getText());
          
            project = new PhotoProject(projectFolder);
            project.setName(projectNamejTextField1.getText());
            populateSeriesJPanels();
        };
        

    }//GEN-LAST:event_newProjectjButtonActionPerformed

    private void addLightFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLightFramesjButtonActionPerformed
        addStandardSeries("lightframes", 40);
    }//GEN-LAST:event_addLightFramesjButtonActionPerformed

    private void addDarkFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDarkFramesjButtonActionPerformed
        addStandardSeries("darkframes", 20);
    }//GEN-LAST:event_addDarkFramesjButtonActionPerformed

    private void addFlatFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlatFramesjButtonActionPerformed
        addStandardSeries("flatframes", 20);
    }//GEN-LAST:event_addFlatFramesjButtonActionPerformed

    private void addBiasFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBiasFramesjButtonActionPerformed
        addStandardSeries("biasframes", 20);
    }//GEN-LAST:event_addBiasFramesjButtonActionPerformed

    private void removejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejButtonActionPerformed
        
        int i = 0;
        for (Component c : seriesjPanel.getComponents()) {
            if (c.isEnabled()) {
                
                break;
            }
            i++;
        }
        project.getPhotoSeries().remove(i);
        populateSeriesJPanels();

    }//GEN-LAST:event_removejButtonActionPerformed
    WaitingForFilesJDialog wfd = null;
    private void startjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startjToggleButtonActionPerformed
        wfd = new WaitingForFilesJDialog(parent, this);
        if (startjToggleButton.isSelected()) {
            startjToggleButton.setText("Stop");
            ftpConnection.addFTPConnectionListenerOnce(this);
            running = true;
            //    wfd.setVisible(true);
        } else {
            startjToggleButton.setText("Start!");
            ftpConnection.removeFTPConnectionListener(this);
            //       wfd.setVisible(false);
            running = false;
        }
    }//GEN-LAST:event_startjToggleButtonActionPerformed
    
    private void addStandardSeries(String name, int number) {
        PhotoSerie ps = new PhotoSerie(project);
        ps.setName(name);
        ps.setNumberOfPlannedPhotos(number);
        project.getPhotoSeries().add(ps);
        populateSeriesJPanels();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBiasFramesjButton;
    private javax.swing.JButton addDarkFramesjButton;
    private javax.swing.JButton addFlatFramesjButton;
    private javax.swing.JButton addLightFramesjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton newProjectjButton;
    private javax.swing.JTextField projectNamejTextField1;
    private javax.swing.JPanel projectjPanel;
    private javax.swing.JButton removejButton;
    private javax.swing.JPanel seriesjPanel;
    private javax.swing.JToggleButton startjToggleButton;
    private javax.swing.JPanel toolsjPanel;
    // End of variables declaration//GEN-END:variables

    void populateSeriesJPanels() {
        projectNamejTextField1.setText(project.getName());
        seriesjPanel.removeAll();
        activePanel = null;
        boolean firstUncompletedFound = false;
        for (PhotoSerie ps : project.getPhotoSeries()) {
            PhotoSerieJPanel psp = new PhotoSerieJPanel(ps, this);
            seriesjPanel.add(psp);
            if (!ps.isComplete() && (!firstUncompletedFound)) {
                activePanel = psp;
                firstUncompletedFound = true;
            }
        }
        
        validate();
    }
    
    void updateSeriesJPanels(){
        boolean firstUncompletedFound = false;
        int i=0;
        for (PhotoSerie ps : project.getPhotoSeries()) {
          //  PhotoSerieJPanel psp = new PhotoSerieJPanel(ps, this);
            //seriesjPanel.add(psp);
            if (!ps.isComplete() && (!firstUncompletedFound)) {
                PhotoSerieJPanel psp=(PhotoSerieJPanel)seriesjPanel.getComponent(i);
                activePanel = psp;
                firstUncompletedFound = true;
            }
            i++;
        }
        
    }
    public void clickedOnPanel(PhotoSerieJPanel psp) {
        for (Component c : seriesjPanel.getComponents()) {
            c.setEnabled(true);
            ((PhotoSerieJPanel) c).setBorderForState(false);
        }
        psp.setEnabled(true);
        psp.setBorderForState(true);
    }

    /**
     * @return the project
     */
    public PhotoProject getProject() {
        return project;
    }

    /**
     * @param project the project to set
     */
    public void setProject(PhotoProject project) {
        this.project = project;
    }

    /**
     * @return the ftpConnection
     */
    public FTPConnection getFtpConnection() {
        return ftpConnection;
    }

    /**
     * @param ftpConnection the ftpConnection to set
     */
    public void setFtpConnection(FTPConnection ftpConnection) {
        this.ftpConnection = ftpConnection;
    }
    
    @Override
    public void receiveNotification(FTPConnectionStatus status, String message, int progress) {
        if (activePanel == null) {
            ftpConnection.removeFTPConnectionListener(this);
            startjToggleButton.setSelected(false);
            running = false;
        }
        if (status == FTPConnectionStatus.NEW_LOCAL_FILE) {
            File file = new File(message);
            try {
                activePanel.getPhotoSerie().receiveFile(file);
                wfd.update(activePanel.getPhotoSerie());
            } catch (IOException ex) {
                Logger.getLogger(PhotoProjectJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            activePanel.update();
            if (activePanel.getPhotoSerie().isComplete()) {
                updateSeriesJPanels();
                activePanel.update();
            }
        }
        jScrollPane1.scrollRectToVisible(activePanel.getVisibleRect());
    }

    /**
     * @return the running
     */
    public boolean isRunning() {
        return running;
    }

    /**
     * @param parent the parent to set
     */
    public void setParent(Frame parent) {
        this.parent = parent;
    }
}
