/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.astromode.gui;

import de.quadrillenschule.azocamsyncd.GlobalProperties;
import de.quadrillenschule.azocamsyncd.astromode.PhotoProject;
import de.quadrillenschule.azocamsyncd.astromode.PhotoProjectProfile;
import de.quadrillenschule.azocamsyncd.astromode.PhotoSerie;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnection;
import de.quadrillenschule.azocamsyncd.ftpservice.FTPConnectionListener;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;

/**
 *
 * @author Andreas
 */
public class PhotoProjectJPanel extends javax.swing.JPanel implements FTPConnectionListener {

    private PhotoProject project;
    private FTPConnection ftpConnection;
    private boolean running = false;
    private Frame parent;
    GlobalProperties gp;

    /**
     * Creates new form PhotoProjectJPanel
     */
    public PhotoProjectJPanel() {
        gp = new GlobalProperties();
        project = new PhotoProject(new File(gp.getProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER), "New Project"));
        project.setName("New Project");

        initComponents();

        createPhotoProjectJTable();
        populateProfilesJComboBox();
        profilesjComboBoxActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        projectjPanel = new javax.swing.JPanel();
        newProjectjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        projectNamejTextField1 = new javax.swing.JTextField();
        startjToggleButton = new javax.swing.JToggleButton();
        toolsjPanel = new javax.swing.JPanel();
        addLightFramesjButton = new javax.swing.JButton();
        addDarkFramesjButton = new javax.swing.JButton();
        addFlatFramesjButton = new javax.swing.JButton();
        addBiasFramesjButton = new javax.swing.JButton();
        moveUpjButton = new javax.swing.JButton();
        moveDownjButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        removejButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        profilesjComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        profileNamejTextField = new javax.swing.JTextField();
        storeProfilejButton = new javax.swing.JButton();
        deleteProfilejButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        photoProjectjTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        projectjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Project"));
        projectjPanel.setLayout(new javax.swing.BoxLayout(projectjPanel, javax.swing.BoxLayout.LINE_AXIS));

        newProjectjButton.setText("Directory...");
        newProjectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProjectjButtonActionPerformed(evt);
            }
        });
        projectjPanel.add(newProjectjButton);

        jLabel1.setText("  Name: ");
        projectjPanel.add(jLabel1);

        projectNamejTextField1.setText(project.getName());
        projectjPanel.add(projectNamejTextField1);

        startjToggleButton.setText("Start!");
        startjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startjToggleButtonActionPerformed(evt);
            }
        });
        projectjPanel.add(startjToggleButton);

        add(projectjPanel, java.awt.BorderLayout.NORTH);

        toolsjPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Edit Series"));
        toolsjPanel.setLayout(new javax.swing.BoxLayout(toolsjPanel, javax.swing.BoxLayout.PAGE_AXIS));

        addLightFramesjButton.setText("Add lightframes");
        addLightFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLightFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addLightFramesjButton);

        addDarkFramesjButton.setText("Add darkframes");
        addDarkFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDarkFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addDarkFramesjButton);

        addFlatFramesjButton.setText("Add flatframes");
        addFlatFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFlatFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addFlatFramesjButton);

        addBiasFramesjButton.setText("Add bias frames");
        addBiasFramesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBiasFramesjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(addBiasFramesjButton);

        moveUpjButton.setText("Move up");
        moveUpjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(moveUpjButton);

        moveDownjButton.setText("Move down");
        moveDownjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownjButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(moveDownjButton);

        jLabel2.setText("   ");
        toolsjPanel.add(jLabel2);

        removejButton.setText("Remove");
        removejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejButtonActionPerformed(evt);
            }
        });
        toolsjPanel.add(removejButton);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Series Profile", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        profilesjComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        profilesjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profilesjComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(profilesjComboBox, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Profile Name", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        profileNamejTextField.setText("UnnamedProfile");
        jPanel2.add(profileNamejTextField);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        storeProfilejButton.setText("Store Profile");
        storeProfilejButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeProfilejButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(storeProfilejButton, gridBagConstraints);

        deleteProfilejButton1.setText("Delete Profile");
        deleteProfilejButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProfilejButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(deleteProfilejButton1, gridBagConstraints);

        toolsjPanel.add(jPanel1);

        add(toolsjPanel, java.awt.BorderLayout.EAST);

        photoProjectjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        photoProjectjTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(photoProjectjTable);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void newProjectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProjectjButtonActionPerformed
        GlobalProperties gp = new GlobalProperties();

        JFileChooser jfc = new JFileChooser(gp.getProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER));
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (jfc.showDialog(this, "Select Directory") == JFileChooser.APPROVE_OPTION) {
            gp.setProperty(GlobalProperties.CamSyncProperties.LAST_ASTRO_FOLDER, jfc.getSelectedFile().getAbsolutePath());
            //     String name = JOptionPane.showInputDialog(this, "Give a name to this project");
            File projectFolder = new File(jfc.getSelectedFile(), projectNamejTextField1.getText());

            project = new PhotoProject(projectFolder);
            project.setName(projectNamejTextField1.getText());
            createPhotoProjectJTable();
        };


    }//GEN-LAST:event_newProjectjButtonActionPerformed

    private void addLightFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLightFramesjButtonActionPerformed
        addStandardSeries("lightframes", 40);
    }//GEN-LAST:event_addLightFramesjButtonActionPerformed

    private void addDarkFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDarkFramesjButtonActionPerformed
        addStandardSeries("darkframes", 20);
    }//GEN-LAST:event_addDarkFramesjButtonActionPerformed

    private void addFlatFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFlatFramesjButtonActionPerformed
        addStandardSeries("flatframes", 20);
    }//GEN-LAST:event_addFlatFramesjButtonActionPerformed

    private void addBiasFramesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBiasFramesjButtonActionPerformed
        addStandardSeries("biasframes", 20);
    }//GEN-LAST:event_addBiasFramesjButtonActionPerformed

    private void removejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejButtonActionPerformed

        int i = photoProjectjTable.getSelectedRow();
        project.getPhotoSeries().remove(i);
        tableDataChanged();

    }//GEN-LAST:event_removejButtonActionPerformed
    WaitingForFilesJDialog wfd = null;
    private void startjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startjToggleButtonActionPerformed
        wfd = new WaitingForFilesJDialog(parent, this);
        if (startjToggleButton.isSelected()) {
            startjToggleButton.setText("Stop");
            ftpConnection.addFTPConnectionListenerOnce(this);
            running = true;
            //    wfd.setVisible(true);
        } else {
            startjToggleButton.setText("Start!");
            ftpConnection.removeFTPConnectionListener(this);
            //       wfd.setVisible(false);
            running = false;
        }
    }//GEN-LAST:event_startjToggleButtonActionPerformed

    void populateProfilesJComboBox() {
        profilesjComboBox.setModel(new DefaultComboBoxModel(gp.getProfiles().toArray()));
    }
    private void storeProfilejButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeProfilejButtonActionPerformed

        project.setProfileName(profileNamejTextField.getText());
        gp.removeProfile(project);
        gp.setProfile(project);
        tableDataChanged();
        System.out.println(project.toJSONProfile().toString());
    }//GEN-LAST:event_storeProfilejButtonActionPerformed

    private void profilesjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profilesjComboBoxActionPerformed
        project.getPhotoSeries().clear();
        PhotoProjectProfile ppp = (PhotoProjectProfile) profilesjComboBox.getSelectedItem();

        project.getPhotoSeries().addAll(ppp.getPhotoSeries());
        for (PhotoSerie ps : project.getPhotoSeries()) {
            ps.setProject(project);
        }
        profileNamejTextField.setText(ppp.toString());
        tableDataChanged();
    }//GEN-LAST:event_profilesjComboBoxActionPerformed

    private void deleteProfilejButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProfilejButton1ActionPerformed
        gp.removeProfile(project);
        try {
            gp.store();
        } catch (IOException ex) {
            Logger.getLogger(PhotoProjectJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateProfilesJComboBox();
    }//GEN-LAST:event_deleteProfilejButton1ActionPerformed

    private void moveUpjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpjButtonActionPerformed
        int selectedRow = photoProjectjTable.getSelectedRow();
        if (selectedRow > 0) {
            PhotoSerie mover = project.getPhotoSeries().remove(selectedRow);
            project.getPhotoSeries().add(selectedRow - 1, mover);
            tableDataChanged();
            photoProjectjTable.setRowSelectionInterval(selectedRow - 1, selectedRow - 1);
        }
    }//GEN-LAST:event_moveUpjButtonActionPerformed

    private void moveDownjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownjButtonActionPerformed
        int selectedRow = photoProjectjTable.getSelectedRow();
        if ((selectedRow >= 0) && (selectedRow < photoProjectjTable.getRowCount() - 1)) {
            PhotoSerie mover = project.getPhotoSeries().remove(selectedRow);
            project.getPhotoSeries().add(selectedRow + 1, mover);
            tableDataChanged();
            photoProjectjTable.setRowSelectionInterval(selectedRow + 1, selectedRow + 1);

        }
    }//GEN-LAST:event_moveDownjButtonActionPerformed

    private void addStandardSeries(String name, int number) {
        PhotoSerie ps = new PhotoSerie(project);
        ps.setName(name);
        ps.setNumberOfPlannedPhotos(number);
        int row = photoProjectjTable.getSelectedRow();
        if (row < 0) {
            project.getPhotoSeries().add(ps);
            tableDataChanged();
            photoProjectjTable.setRowSelectionInterval(project.getPhotoSeries().size() - 1, project.getPhotoSeries().size() - 1);
        } else {
            project.getPhotoSeries().add(row, ps);
            tableDataChanged();
            photoProjectjTable.setRowSelectionInterval(row, row);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBiasFramesjButton;
    private javax.swing.JButton addDarkFramesjButton;
    private javax.swing.JButton addFlatFramesjButton;
    private javax.swing.JButton addLightFramesjButton;
    private javax.swing.JButton deleteProfilejButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton moveDownjButton;
    private javax.swing.JButton moveUpjButton;
    private javax.swing.JButton newProjectjButton;
    private javax.swing.JTable photoProjectjTable;
    private javax.swing.JTextField profileNamejTextField;
    private javax.swing.JComboBox profilesjComboBox;
    private javax.swing.JTextField projectNamejTextField1;
    private javax.swing.JPanel projectjPanel;
    private javax.swing.JButton removejButton;
    private javax.swing.JToggleButton startjToggleButton;
    private javax.swing.JButton storeProfilejButton;
    private javax.swing.JPanel toolsjPanel;
    // End of variables declaration//GEN-END:variables

    void createPhotoProjectJTable() {
        PhotoProjectTableModel ptm = new PhotoProjectTableModel(project);
        photoProjectjTable.setModel(ptm);

        validate();
    }

    /**
     * @return the project
     */
    public PhotoProject getProject() {
        return project;
    }

    /**
     * @param project the project to set
     */
    public void setProject(PhotoProject project) {
        this.project = project;
    }

    /**
     * @return the ftpConnection
     */
    public FTPConnection getFtpConnection() {
        return ftpConnection;
    }

    /**
     * @param ftpConnection the ftpConnection to set
     */
    public void setFtpConnection(FTPConnection ftpConnection) {
        this.ftpConnection = ftpConnection;
    }

    @Override
    public void receiveNotification(FTPConnectionStatus status, String message, int progress) {

        if (status == FTPConnectionStatus.NEW_LOCAL_FILE) {
            File file = new File(message);
            try {
                project.getActivePhotoSerie().receiveFile(file);
                //     wfd.update(activePanel.getPhotoSerie());
            } catch (IOException ex) {
                Logger.getLogger(PhotoProjectJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            tableDataChanged();
        }

    }

    void tableDataChanged() {
        ((PhotoProjectTableModel) photoProjectjTable.getModel()).fireTableDataChanged();

    }

    /**
     * @return the running
     */
    public boolean isRunning() {
        return running;
    }

    /**
     * @param parent the parent to set
     */
    public void setParent(Frame parent) {
        this.parent = parent;
    }
}
