/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.quadrillenschule.azocamsyncd.astromode.gui;

import de.quadrillenschule.azocamsyncd.astromode.PhotoSerie;
import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.border.LineBorder;

/**
 *
 * @author Andreas
 */
public class PhotoSerieJPanel extends javax.swing.JPanel {

    private PhotoSerie photoSerie;
    private PhotoProjectJPanel projectPanel;

    /**
     * Creates new form PhotSerieJPanel
     */
    public PhotoSerieJPanel(PhotoSerie photoSerie, PhotoProjectJPanel projectPanel) {
        this.photoSerie = photoSerie;
        this.projectPanel = projectPanel;
        initComponents();
        update();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        completedjCheckBox = new javax.swing.JCheckBox();
        plannedFilesjLabel = new javax.swing.JLabel();
        currentFilesjLabel = new javax.swing.JLabel();
        statusjLabel = new javax.swing.JLabel();
        numberOfPlannedFilesjTextField = new javax.swing.JTextField();
        openFolderjButton = new javax.swing.JButton();
        folderjLabel = new javax.swing.JLabel();
        namejTextField = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 51), 4));
        setEnabled(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        completedjCheckBox.setText("Not yet Completed");
        completedjCheckBox.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        add(completedjCheckBox, gridBagConstraints);

        plannedFilesjLabel.setText("Number of planned files: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(plannedFilesjLabel, gridBagConstraints);

        currentFilesjLabel.setText("Current number of files: "+photoSerie.getPhotos().size());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(currentFilesjLabel, gridBagConstraints);

        statusjLabel.setText(photoSerie.getStatus().name());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(statusjLabel, gridBagConstraints);

        numberOfPlannedFilesjTextField.setText("jTextField1");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), numberOfPlannedFilesjTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        numberOfPlannedFilesjTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                numberOfPlannedFilesjTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(numberOfPlannedFilesjTextField, gridBagConstraints);

        openFolderjButton.setText("Open Folder...");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), openFolderjButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        openFolderjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderjButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        add(openFolderjButton, gridBagConstraints);

        folderjLabel.setText(photoSerie.getFolder().getAbsolutePath());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        add(folderjLabel, gridBagConstraints);

        namejTextField.setText(photoSerie.getName());

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), namejTextField, org.jdesktop.beansbinding.BeanProperty.create("editable"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.FIRST_LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 0, 0);
        add(namejTextField, gridBagConstraints);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void numberOfPlannedFilesjTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numberOfPlannedFilesjTextFieldKeyReleased
        photoSerie.setNumberOfPlannedPhotos(Integer.parseInt(numberOfPlannedFilesjTextField.getText()));
    }//GEN-LAST:event_numberOfPlannedFilesjTextFieldKeyReleased

    private void openFolderjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderjButtonActionPerformed
        try {
            Desktop.getDesktop().open(photoSerie.getFolder());
        } catch (IOException ex) {
            Logger.getLogger(PhotoSerieJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openFolderjButtonActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        projectPanel.clickedOnPanel(this);
    }//GEN-LAST:event_formMouseClicked

    public void update() {
        numberOfPlannedFilesjTextField.setText("" + getPhotoSerie().getNumberOfPlannedPhotos());
        currentFilesjLabel.setText("Current number of files: " + getPhotoSerie().getPhotos().size());
        completedjCheckBox.setSelected(getPhotoSerie().isComplete());
        if (getPhotoSerie().isComplete()) {
            completedjCheckBox.setText("Completed");
        } else {
            completedjCheckBox.setText("Not yet completed");
        }
        statusjLabel.setText(photoSerie.getStatus().name());
        folderjLabel.setText(photoSerie.getFolder().getAbsolutePath());
        LineBorder border = (LineBorder) getBorder();
        switch (getPhotoSerie().getStatus()) {
            case RECEIVING_FILES:
                border = new LineBorder(Color.blue, 4);break;
            case NEW:
                border = new LineBorder(Color.darkGray, 4);break;
            case COMPLETED:
                border = new LineBorder(Color.green, 4);break;
        }
        setBorder(border);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox completedjCheckBox;
    private javax.swing.JLabel currentFilesjLabel;
    private javax.swing.JLabel folderjLabel;
    private javax.swing.JTextField namejTextField;
    private javax.swing.JTextField numberOfPlannedFilesjTextField;
    private javax.swing.JButton openFolderjButton;
    private javax.swing.JLabel plannedFilesjLabel;
    private javax.swing.JLabel statusjLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the photoSerie
     */
    public PhotoSerie getPhotoSerie() {
        return photoSerie;
    }

    /**
     * @param photoSerie the photoSerie to set
     */
    public void setPhotoSerie(PhotoSerie photoSerie) {
        this.photoSerie = photoSerie;
    }
}
